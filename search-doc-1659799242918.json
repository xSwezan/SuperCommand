[{"title":"SuperCommand","type":0,"sectionRef":"#","url":"api/SuperCommand","content":"On this page SuperCommand","keywords":""},{"title":"Operator","type":0,"sectionRef":"#","url":"api/Operator","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Operator","url":"api/Operator#properties","content":" "},{"title":"Pattern​","type":1,"pageTitle":"Operator","url":"api/Operator#Pattern","content":"&lt;/&gt; Operator.Pattern: string The Operator's set Pattern "},{"title":"Functions​","type":1,"pageTitle":"Operator","url":"api/Operator#functions","content":" "},{"title":"Create​","type":1,"pageTitle":"Operator","url":"api/Operator#Create","content":"&lt;/&gt; Operator:Create( Pattern: string,-- The Pattern that SuperCommand checks for Get: (FoundPattern: string) → string-- Function that will return the replacement for the pattern ) → OperatorClass Creates a OperatorClass "},{"title":"Intro","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Why?​","type":1,"pageTitle":"Intro","url":"docs/intro#why","content":"SuperCommand is really easy to setup and has Rich API with alot of customization. SuperCommand is useful when making for example Admin Commands and such. "},{"title":"Group","type":0,"sectionRef":"#","url":"api/Group","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Group","url":"api/Group#properties","content":" "},{"title":"Players​","type":1,"pageTitle":"Group","url":"api/Group#Players","content":"&lt;/&gt; Group.Players: {UserId: number} Players that are in the group  "},{"title":"Name​","type":1,"pageTitle":"Group","url":"api/Group#Name","content":"&lt;/&gt; Group.Name: string Name of the Group  "},{"title":"Weight​","type":1,"pageTitle":"Group","url":"api/Group#Weight","content":"&lt;/&gt; Group.Weight: number Weight of the Group "},{"title":"Functions​","type":1,"pageTitle":"Group","url":"api/Group#functions","content":" "},{"title":"Create​","type":1,"pageTitle":"Group","url":"api/Group#Create","content":"&lt;/&gt; Group:Create( Name: string,-- Name of the Group Weight: number-- Weight of the Group ) → GroupClass-- Group Creates a GroupClass  "},{"title":"AssignPlayer​","type":1,"pageTitle":"Group","url":"api/Group#AssignPlayer","content":"&lt;/&gt; Group:AssignPlayer( UserId: number-- Player UserId ) → nil Assign player to the Group  "},{"title":"AssignPlayers​","type":1,"pageTitle":"Group","url":"api/Group#AssignPlayers","content":"&lt;/&gt; Group:AssignPlayers( PlayerIds: {UserId: number}-- Player UserIds ) → nil Assign multiple players to the Group  "},{"title":"PlayerIsInGroup​","type":1,"pageTitle":"Group","url":"api/Group#PlayerIsInGroup","content":"&lt;/&gt; Group:PlayerIsInGroup( Player: Player -- Player to check for ) → boolean | nil Check if certain player is in the Group  "},{"title":"AutoAssign​","type":1,"pageTitle":"Group","url":"api/Group#AutoAssign","content":"&lt;/&gt; Group:AutoAssign( Get: (Player: Player ) → boolean | nil-- Function that returns a boolean depending if the player should be assigned to the Group ) → nil Auto Assigns players for you "},{"title":"Type","type":0,"sectionRef":"#","url":"api/Type","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Type","url":"api/Type#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"Type","url":"api/Type#Name","content":"&lt;/&gt; Type.Name: string Name of the Type "},{"title":"Functions​","type":1,"pageTitle":"Type","url":"api/Type#functions","content":" "},{"title":"Create​","type":1,"pageTitle":"Type","url":"api/Type#Create","content":"&lt;/&gt; Type:Create( Name: string,-- Name of the Type Get: (StringToBeProcessed: string) → any-- The processor function, processes the string and returns the argument that will be used in the command. ) → TypeClass Creates a TypeClass "}]