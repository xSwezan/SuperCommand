"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[403],{94405:e=>{e.exports=JSON.parse('{"functions":[{"name":"Create","desc":"Creates a OperatorClass","params":[{"name":"Pattern","desc":"The Pattern that SuperCommand checks for","lua_type":"string"},{"name":"Get","desc":"Function that will return the replacement for the pattern","lua_type":"(FoundPattern: string) -> string"}],"returns":[{"desc":"","lua_type":"OperatorClass"}],"function_type":"method","source":{"line":30,"path":"src/SuperCommand/Operator.lua"}},{"name":"Get","desc":"Returns the Processed String Operator","params":[{"name":"...","desc":"The arguments sent in by the Pattern","lua_type":"string"}],"returns":[{"desc":"The string that was processed within the Operator\'s Get Method","lua_type":"ProcessedString: string"}],"function_type":"method","private":true,"source":{"line":46,"path":"src/SuperCommand/Operator.lua"}}],"properties":[{"name":"Pattern","desc":"The Operator\'s set Pattern","lua_type":"string","source":{"line":22,"path":"src/SuperCommand/Operator.lua"}}],"types":[],"name":"Operator","desc":"Operators will format the command arguments before the final command output.\\nOperators let you create a Pattern that SuperCommand checks for, SuperCommand will then replace that with the output from the given replacement function.","source":{"line":13,"path":"src/SuperCommand/Operator.lua"}}')}}]);