"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[773],{30523:e=>{e.exports=JSON.parse('{"functions":[{"name":"Create","desc":"Creates a TypeClass","params":[{"name":"Name","desc":"Name of the Type","lua_type":"string"},{"name":"Get","desc":"The processor function, processes the string and returns the argument that will be used in the command.","lua_type":"(StringToBeProcessed: string) -> any"}],"returns":[{"desc":"","lua_type":"TypeClass"}],"function_type":"method","source":{"line":37,"path":"src/SuperCommand/Type.lua"}},{"name":"Get","desc":"Returns a Processed Type","params":[{"name":"StringToBeProcessed","desc":"The string that you want to be Processed","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ProcessedType"}],"function_type":"method","private":true,"source":{"line":53,"path":"src/SuperCommand/Type.lua"}}],"properties":[{"name":"Name","desc":"Name of the Type","lua_type":"string","source":{"line":29,"path":"src/SuperCommand/Type.lua"}}],"types":[],"name":"Type","desc":"Types are powerful, **they convert a string to a Type before processing the command**.\\nAn example of a Custom Type is Player, if your command has Player as an argument, SuperCommand will process the string to a Player and pass that as an argument to the Execute function in the command.\\n\\n```lua\\nlocal SuperCommand = require(PARENT.SuperCommand)\\n\\n-- Create Type\\nlocal NewType = SuperCommand:CreateType()\\n```","source":{"line":20,"path":"src/SuperCommand/Type.lua"}}')}}]);