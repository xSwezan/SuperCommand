{
	// Place your SuperCommand workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Roact Component Class": {
		"prefix": "roactclassfix",
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Roact = require(ReplicatedStorage.SuperCommand.Roact)",
			"local RoactSpring = require(ReplicatedStorage.SuperCommand[\"Roact-spring\"])",
			"",
			"local e = Roact.createElement",
			"",
			"local Component = Roact.Component:extend(script.Name)",
			"",
			"function Component:init()",
			"\tself.style, self.api = RoactSpring.Controller.new{",
			"",
			"\t}",
			"end",
			"",
			"function Component:render()",
			"\t",
			"end",
			"",
			"return Component"
		],
	},
	"RoactRodux Component Class": {
		"prefix": "roactroduxclassfix",
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Roact = require(ReplicatedStorage.SuperCommand.Roact)",
			"local RoactRodux = require(ReplicatedStorage.SuperCommand.RoactRodux)",
			"local RoactSpring = require(ReplicatedStorage.SuperCommand[\"Roact-spring\"])",
			"",
			"local e = Roact.createElement",
			"",
			"local Component = Roact.Component:extend(script.Name)",
			"",
			"function Component:init()",
			"\tself.style, self.api = RoactSpring.Controller.new{",
			"\t\t",
			"\t}",
			"end",
			"\t",
			"function Component:render()",
			"\t",
			"end",
			"",
			"return RoactRodux.connect(",
			"\tfunction(State, Props)",
			"\t\treturn {",
			"\t\t\tVariables = State.Variables;",
			"\t\t}",
			"\tend,",
			"\tfunction(Dispatch)",
			"\t\treturn {",
			"\t\t\tSetVariable = function(Name: string, Value: any)",
			"\t\t\t\tDispatch(Actions.SetVariable(Name, Value))",
			"\t\t\tend;",
			"\t\t}",
			"\tend",
			")(Component)"
		],
	}
}